// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datanode_server.proto
#ifndef GRPC_datanode_5fserver_2eproto__INCLUDED
#define GRPC_datanode_5fserver_2eproto__INCLUDED

#include "datanode_server.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bdfs {

class datanode_server final {
 public:
  static constexpr char const* service_full_name() {
    return "bdfs.datanode_server";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::bdfs::replicas_resp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::replicas_resp>> Asyncget_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::replicas_resp>>(Asyncget_replicasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::replicas_resp>> PrepareAsyncget_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::replicas_resp>>(PrepareAsyncget_replicasRaw(context, request, cq));
    }
    virtual ::grpc::Status get_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::bdfs::get_block_resp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::get_block_resp>> Asyncget_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::get_block_resp>>(Asyncget_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::get_block_resp>> PrepareAsyncget_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::get_block_resp>>(PrepareAsyncget_blockRaw(context, request, cq));
    }
    virtual ::grpc::Status send_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::bdfs::send_block_resp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::send_block_resp>> Asyncsend_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::send_block_resp>>(Asyncsend_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::send_block_resp>> PrepareAsyncsend_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::send_block_resp>>(PrepareAsyncsend_blockRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::replicas_resp>* Asyncget_replicasRaw(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::replicas_resp>* PrepareAsyncget_replicasRaw(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::get_block_resp>* Asyncget_blockRaw(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::get_block_resp>* PrepareAsyncget_blockRaw(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::send_block_resp>* Asyncsend_blockRaw(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::send_block_resp>* PrepareAsyncsend_blockRaw(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status get_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::bdfs::replicas_resp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>> Asyncget_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>>(Asyncget_replicasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>> PrepareAsyncget_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>>(PrepareAsyncget_replicasRaw(context, request, cq));
    }
    ::grpc::Status get_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::bdfs::get_block_resp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>> Asyncget_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>>(Asyncget_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>> PrepareAsyncget_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>>(PrepareAsyncget_blockRaw(context, request, cq));
    }
    ::grpc::Status send_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::bdfs::send_block_resp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>> Asyncsend_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>>(Asyncsend_blockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>> PrepareAsyncsend_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>>(PrepareAsyncsend_blockRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>* Asyncget_replicasRaw(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>* PrepareAsyncget_replicasRaw(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>* Asyncget_blockRaw(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>* PrepareAsyncget_blockRaw(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>* Asyncsend_blockRaw(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>* PrepareAsyncsend_blockRaw(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_replicas_;
    const ::grpc::internal::RpcMethod rpcmethod_get_block_;
    const ::grpc::internal::RpcMethod rpcmethod_send_block_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_replicas(::grpc::ServerContext* context, const ::bdfs::replicas_req* request, ::bdfs::replicas_resp* response);
    virtual ::grpc::Status get_block(::grpc::ServerContext* context, const ::bdfs::get_block_req* request, ::bdfs::get_block_resp* response);
    virtual ::grpc::Status send_block(::grpc::ServerContext* context, const ::bdfs::send_block_req* request, ::bdfs::send_block_resp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_replicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_replicas() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_replicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_replicas(::grpc::ServerContext* context, const ::bdfs::replicas_req* request, ::bdfs::replicas_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_replicas(::grpc::ServerContext* context, ::bdfs::replicas_req* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::replicas_resp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_block() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_get_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_block(::grpc::ServerContext* context, const ::bdfs::get_block_req* request, ::bdfs::get_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_block(::grpc::ServerContext* context, ::bdfs::get_block_req* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::get_block_resp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_send_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_send_block() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_send_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_block(::grpc::ServerContext* context, const ::bdfs::send_block_req* request, ::bdfs::send_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend_block(::grpc::ServerContext* context, ::bdfs::send_block_req* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::send_block_resp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_replicas<WithAsyncMethod_get_block<WithAsyncMethod_send_block<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_get_replicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_replicas() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_replicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_replicas(::grpc::ServerContext* context, const ::bdfs::replicas_req* request, ::bdfs::replicas_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_block() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_get_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_block(::grpc::ServerContext* context, const ::bdfs::get_block_req* request, ::bdfs::get_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_send_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_send_block() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_send_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_block(::grpc::ServerContext* context, const ::bdfs::send_block_req* request, ::bdfs::send_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_replicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_replicas() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_replicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_replicas(::grpc::ServerContext* context, const ::bdfs::replicas_req* request, ::bdfs::replicas_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_replicas(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_block() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_get_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_block(::grpc::ServerContext* context, const ::bdfs::get_block_req* request, ::bdfs::get_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_send_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_send_block() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_send_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status send_block(::grpc::ServerContext* context, const ::bdfs::send_block_req* request, ::bdfs::send_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsend_block(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_replicas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_replicas() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::replicas_req, ::bdfs::replicas_resp>(std::bind(&WithStreamedUnaryMethod_get_replicas<BaseClass>::Streamedget_replicas, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_replicas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_replicas(::grpc::ServerContext* context, const ::bdfs::replicas_req* request, ::bdfs::replicas_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_replicas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::replicas_req,::bdfs::replicas_resp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_block() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::get_block_req, ::bdfs::get_block_resp>(std::bind(&WithStreamedUnaryMethod_get_block<BaseClass>::Streamedget_block, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_block(::grpc::ServerContext* context, const ::bdfs::get_block_req* request, ::bdfs::get_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::get_block_req,::bdfs::get_block_resp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_send_block : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_send_block() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::send_block_req, ::bdfs::send_block_resp>(std::bind(&WithStreamedUnaryMethod_send_block<BaseClass>::Streamedsend_block, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_send_block() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status send_block(::grpc::ServerContext* context, const ::bdfs::send_block_req* request, ::bdfs::send_block_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsend_block(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::send_block_req,::bdfs::send_block_resp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_replicas<WithStreamedUnaryMethod_get_block<WithStreamedUnaryMethod_send_block<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_replicas<WithStreamedUnaryMethod_get_block<WithStreamedUnaryMethod_send_block<Service > > > StreamedService;
};

}  // namespace bdfs


#endif  // GRPC_datanode_5fserver_2eproto__INCLUDED
