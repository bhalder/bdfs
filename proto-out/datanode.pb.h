// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanode.proto

#ifndef PROTOBUF_datanode_2eproto__INCLUDED
#define PROTOBUF_datanode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_datanode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsnode_metaImpl();
void InitDefaultsnode_meta();
void InitDefaultsmsg_metaImpl();
void InitDefaultsmsg_meta();
void InitDefaultsdatanodeImpl();
void InitDefaultsdatanode();
void InitDefaultsdatablock_metaImpl();
void InitDefaultsdatablock_meta();
void InitDefaultsblock_summaryImpl();
void InitDefaultsblock_summary();
void InitDefaultsfsserver_metaImpl();
void InitDefaultsfsserver_meta();
void InitDefaultsconnect_reqImpl();
void InitDefaultsconnect_req();
void InitDefaultsconnect_respImpl();
void InitDefaultsconnect_resp();
void InitDefaultskeepalive_reqImpl();
void InitDefaultskeepalive_req();
void InitDefaultskeepalive_respImpl();
void InitDefaultskeepalive_resp();
void InitDefaultsdisconnect_reqImpl();
void InitDefaultsdisconnect_req();
void InitDefaultsdisconnect_respImpl();
void InitDefaultsdisconnect_resp();
void InitDefaultsblock_received_reqImpl();
void InitDefaultsblock_received_req();
inline void InitDefaults() {
  InitDefaultsnode_meta();
  InitDefaultsmsg_meta();
  InitDefaultsdatanode();
  InitDefaultsdatablock_meta();
  InitDefaultsblock_summary();
  InitDefaultsfsserver_meta();
  InitDefaultsconnect_req();
  InitDefaultsconnect_resp();
  InitDefaultskeepalive_req();
  InitDefaultskeepalive_resp();
  InitDefaultsdisconnect_req();
  InitDefaultsdisconnect_resp();
  InitDefaultsblock_received_req();
}
}  // namespace protobuf_datanode_2eproto
namespace bdfs {
class block_received_req;
class block_received_reqDefaultTypeInternal;
extern block_received_reqDefaultTypeInternal _block_received_req_default_instance_;
class block_summary;
class block_summaryDefaultTypeInternal;
extern block_summaryDefaultTypeInternal _block_summary_default_instance_;
class connect_req;
class connect_reqDefaultTypeInternal;
extern connect_reqDefaultTypeInternal _connect_req_default_instance_;
class connect_resp;
class connect_respDefaultTypeInternal;
extern connect_respDefaultTypeInternal _connect_resp_default_instance_;
class datablock_meta;
class datablock_metaDefaultTypeInternal;
extern datablock_metaDefaultTypeInternal _datablock_meta_default_instance_;
class datanode;
class datanodeDefaultTypeInternal;
extern datanodeDefaultTypeInternal _datanode_default_instance_;
class disconnect_req;
class disconnect_reqDefaultTypeInternal;
extern disconnect_reqDefaultTypeInternal _disconnect_req_default_instance_;
class disconnect_resp;
class disconnect_respDefaultTypeInternal;
extern disconnect_respDefaultTypeInternal _disconnect_resp_default_instance_;
class fsserver_meta;
class fsserver_metaDefaultTypeInternal;
extern fsserver_metaDefaultTypeInternal _fsserver_meta_default_instance_;
class keepalive_req;
class keepalive_reqDefaultTypeInternal;
extern keepalive_reqDefaultTypeInternal _keepalive_req_default_instance_;
class keepalive_resp;
class keepalive_respDefaultTypeInternal;
extern keepalive_respDefaultTypeInternal _keepalive_resp_default_instance_;
class msg_meta;
class msg_metaDefaultTypeInternal;
extern msg_metaDefaultTypeInternal _msg_meta_default_instance_;
class node_meta;
class node_metaDefaultTypeInternal;
extern node_metaDefaultTypeInternal _node_meta_default_instance_;
}  // namespace bdfs
namespace bdfs {

// ===================================================================

class node_meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.node_meta) */ {
 public:
  node_meta();
  virtual ~node_meta();

  node_meta(const node_meta& from);

  inline node_meta& operator=(const node_meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  node_meta(node_meta&& from) noexcept
    : node_meta() {
    *this = ::std::move(from);
  }

  inline node_meta& operator=(node_meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const node_meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const node_meta* internal_default_instance() {
    return reinterpret_cast<const node_meta*>(
               &_node_meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(node_meta* other);
  friend void swap(node_meta& a, node_meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline node_meta* New() const PROTOBUF_FINAL { return New(NULL); }

  node_meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const node_meta& from);
  void MergeFrom(const node_meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(node_meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string _name = 1;
  void clear__name();
  static const int kNameFieldNumber = 1;
  const ::std::string& _name() const;
  void set__name(const ::std::string& value);
  #if LANG_CXX11
  void set__name(::std::string&& value);
  #endif
  void set__name(const char* value);
  void set__name(const char* value, size_t size);
  ::std::string* mutable__name();
  ::std::string* release__name();
  void set_allocated__name(::std::string* _name);

  // string _ip = 2;
  void clear__ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& _ip() const;
  void set__ip(const ::std::string& value);
  #if LANG_CXX11
  void set__ip(::std::string&& value);
  #endif
  void set__ip(const char* value);
  void set__ip(const char* value, size_t size);
  ::std::string* mutable__ip();
  ::std::string* release__ip();
  void set_allocated__ip(::std::string* _ip);

  // @@protoc_insertion_point(class_scope:bdfs.node_meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr _name_;
  ::google::protobuf::internal::ArenaStringPtr _ip_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsnode_metaImpl();
};
// -------------------------------------------------------------------

class msg_meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.msg_meta) */ {
 public:
  msg_meta();
  virtual ~msg_meta();

  msg_meta(const msg_meta& from);

  inline msg_meta& operator=(const msg_meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_meta(msg_meta&& from) noexcept
    : msg_meta() {
    *this = ::std::move(from);
  }

  inline msg_meta& operator=(msg_meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_meta* internal_default_instance() {
    return reinterpret_cast<const msg_meta*>(
               &_msg_meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(msg_meta* other);
  friend void swap(msg_meta& a, msg_meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_meta* New() const PROTOBUF_FINAL { return New(NULL); }

  msg_meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const msg_meta& from);
  void MergeFrom(const msg_meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(msg_meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.node_meta from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::bdfs::node_meta& from() const;
  ::bdfs::node_meta* release_from();
  ::bdfs::node_meta* mutable_from();
  void set_allocated_from(::bdfs::node_meta* from);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bdfs.msg_meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::node_meta* from_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsmsg_metaImpl();
};
// -------------------------------------------------------------------

class datanode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.datanode) */ {
 public:
  datanode();
  virtual ~datanode();

  datanode(const datanode& from);

  inline datanode& operator=(const datanode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  datanode(datanode&& from) noexcept
    : datanode() {
    *this = ::std::move(from);
  }

  inline datanode& operator=(datanode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const datanode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const datanode* internal_default_instance() {
    return reinterpret_cast<const datanode*>(
               &_datanode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(datanode* other);
  friend void swap(datanode& a, datanode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline datanode* New() const PROTOBUF_FINAL { return New(NULL); }

  datanode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const datanode& from);
  void MergeFrom(const datanode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(datanode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.node_meta _meta = 1;
  bool has__meta() const;
  void clear__meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::node_meta& _meta() const;
  ::bdfs::node_meta* release__meta();
  ::bdfs::node_meta* mutable__meta();
  void set_allocated__meta(::bdfs::node_meta* _meta);

  // int64 sizeGB = 3;
  void clear_sizegb();
  static const int kSizeGBFieldNumber = 3;
  ::google::protobuf::int64 sizegb() const;
  void set_sizegb(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:bdfs.datanode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::node_meta* _meta_;
  ::google::protobuf::int64 sizegb_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsdatanodeImpl();
};
// -------------------------------------------------------------------

class datablock_meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.datablock_meta) */ {
 public:
  datablock_meta();
  virtual ~datablock_meta();

  datablock_meta(const datablock_meta& from);

  inline datablock_meta& operator=(const datablock_meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  datablock_meta(datablock_meta&& from) noexcept
    : datablock_meta() {
    *this = ::std::move(from);
  }

  inline datablock_meta& operator=(datablock_meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const datablock_meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const datablock_meta* internal_default_instance() {
    return reinterpret_cast<const datablock_meta*>(
               &_datablock_meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(datablock_meta* other);
  friend void swap(datablock_meta& a, datablock_meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline datablock_meta* New() const PROTOBUF_FINAL { return New(NULL); }

  datablock_meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const datablock_meta& from);
  void MergeFrom(const datablock_meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(datablock_meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bdfs.datanode replica_nodes = 4;
  int replica_nodes_size() const;
  void clear_replica_nodes();
  static const int kReplicaNodesFieldNumber = 4;
  const ::bdfs::datanode& replica_nodes(int index) const;
  ::bdfs::datanode* mutable_replica_nodes(int index);
  ::bdfs::datanode* add_replica_nodes();
  ::google::protobuf::RepeatedPtrField< ::bdfs::datanode >*
      mutable_replica_nodes();
  const ::google::protobuf::RepeatedPtrField< ::bdfs::datanode >&
      replica_nodes() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  ::google::protobuf::int64 hash() const;
  void set_hash(::google::protobuf::int64 value);

  // int32 replication_count = 3;
  void clear_replication_count();
  static const int kReplicationCountFieldNumber = 3;
  ::google::protobuf::int32 replication_count() const;
  void set_replication_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bdfs.datablock_meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bdfs::datanode > replica_nodes_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 hash_;
  ::google::protobuf::int32 replication_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsdatablock_metaImpl();
};
// -------------------------------------------------------------------

class block_summary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.block_summary) */ {
 public:
  block_summary();
  virtual ~block_summary();

  block_summary(const block_summary& from);

  inline block_summary& operator=(const block_summary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  block_summary(block_summary&& from) noexcept
    : block_summary() {
    *this = ::std::move(from);
  }

  inline block_summary& operator=(block_summary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const block_summary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const block_summary* internal_default_instance() {
    return reinterpret_cast<const block_summary*>(
               &_block_summary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(block_summary* other);
  friend void swap(block_summary& a, block_summary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline block_summary* New() const PROTOBUF_FINAL { return New(NULL); }

  block_summary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const block_summary& from);
  void MergeFrom(const block_summary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(block_summary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bdfs.datablock_meta blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 2;
  const ::bdfs::datablock_meta& blocks(int index) const;
  ::bdfs::datablock_meta* mutable_blocks(int index);
  ::bdfs::datablock_meta* add_blocks();
  ::google::protobuf::RepeatedPtrField< ::bdfs::datablock_meta >*
      mutable_blocks();
  const ::google::protobuf::RepeatedPtrField< ::bdfs::datablock_meta >&
      blocks() const;

  // .bdfs.node_meta data_meta = 1;
  bool has_data_meta() const;
  void clear_data_meta();
  static const int kDataMetaFieldNumber = 1;
  const ::bdfs::node_meta& data_meta() const;
  ::bdfs::node_meta* release_data_meta();
  ::bdfs::node_meta* mutable_data_meta();
  void set_allocated_data_meta(::bdfs::node_meta* data_meta);

  // @@protoc_insertion_point(class_scope:bdfs.block_summary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bdfs::datablock_meta > blocks_;
  ::bdfs::node_meta* data_meta_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsblock_summaryImpl();
};
// -------------------------------------------------------------------

class fsserver_meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.fsserver_meta) */ {
 public:
  fsserver_meta();
  virtual ~fsserver_meta();

  fsserver_meta(const fsserver_meta& from);

  inline fsserver_meta& operator=(const fsserver_meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fsserver_meta(fsserver_meta&& from) noexcept
    : fsserver_meta() {
    *this = ::std::move(from);
  }

  inline fsserver_meta& operator=(fsserver_meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const fsserver_meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fsserver_meta* internal_default_instance() {
    return reinterpret_cast<const fsserver_meta*>(
               &_fsserver_meta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(fsserver_meta* other);
  friend void swap(fsserver_meta& a, fsserver_meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fsserver_meta* New() const PROTOBUF_FINAL { return New(NULL); }

  fsserver_meta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const fsserver_meta& from);
  void MergeFrom(const fsserver_meta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(fsserver_meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.node_meta _meta = 1;
  bool has__meta() const;
  void clear__meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::node_meta& _meta() const;
  ::bdfs::node_meta* release__meta();
  ::bdfs::node_meta* mutable__meta();
  void set_allocated__meta(::bdfs::node_meta* _meta);

  // int32 keepalive_timeout = 2;
  void clear_keepalive_timeout();
  static const int kKeepaliveTimeoutFieldNumber = 2;
  ::google::protobuf::int32 keepalive_timeout() const;
  void set_keepalive_timeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bdfs.fsserver_meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::node_meta* _meta_;
  ::google::protobuf::int32 keepalive_timeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsfsserver_metaImpl();
};
// -------------------------------------------------------------------

class connect_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.connect_req) */ {
 public:
  connect_req();
  virtual ~connect_req();

  connect_req(const connect_req& from);

  inline connect_req& operator=(const connect_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  connect_req(connect_req&& from) noexcept
    : connect_req() {
    *this = ::std::move(from);
  }

  inline connect_req& operator=(connect_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const connect_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const connect_req* internal_default_instance() {
    return reinterpret_cast<const connect_req*>(
               &_connect_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(connect_req* other);
  friend void swap(connect_req& a, connect_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline connect_req* New() const PROTOBUF_FINAL { return New(NULL); }

  connect_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const connect_req& from);
  void MergeFrom(const connect_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(connect_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // .bdfs.datanode _datanode = 2;
  bool has__datanode() const;
  void clear__datanode();
  static const int kDatanodeFieldNumber = 2;
  const ::bdfs::datanode& _datanode() const;
  ::bdfs::datanode* release__datanode();
  ::bdfs::datanode* mutable__datanode();
  void set_allocated__datanode(::bdfs::datanode* _datanode);

  // @@protoc_insertion_point(class_scope:bdfs.connect_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::message_meta* meta_;
  ::bdfs::datanode* _datanode_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsconnect_reqImpl();
};
// -------------------------------------------------------------------

class connect_resp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.connect_resp) */ {
 public:
  connect_resp();
  virtual ~connect_resp();

  connect_resp(const connect_resp& from);

  inline connect_resp& operator=(const connect_resp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  connect_resp(connect_resp&& from) noexcept
    : connect_resp() {
    *this = ::std::move(from);
  }

  inline connect_resp& operator=(connect_resp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const connect_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const connect_resp* internal_default_instance() {
    return reinterpret_cast<const connect_resp*>(
               &_connect_resp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(connect_resp* other);
  friend void swap(connect_resp& a, connect_resp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline connect_resp* New() const PROTOBUF_FINAL { return New(NULL); }

  connect_resp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const connect_resp& from);
  void MergeFrom(const connect_resp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(connect_resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // .bdfs.response resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::bdfs::response& resp() const;
  ::bdfs::response* release_resp();
  ::bdfs::response* mutable_resp();
  void set_allocated_resp(::bdfs::response* resp);

  // .bdfs.fsserver_meta server_meta = 3;
  bool has_server_meta() const;
  void clear_server_meta();
  static const int kServerMetaFieldNumber = 3;
  const ::bdfs::fsserver_meta& server_meta() const;
  ::bdfs::fsserver_meta* release_server_meta();
  ::bdfs::fsserver_meta* mutable_server_meta();
  void set_allocated_server_meta(::bdfs::fsserver_meta* server_meta);

  // @@protoc_insertion_point(class_scope:bdfs.connect_resp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::message_meta* meta_;
  ::bdfs::response* resp_;
  ::bdfs::fsserver_meta* server_meta_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsconnect_respImpl();
};
// -------------------------------------------------------------------

class keepalive_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.keepalive_req) */ {
 public:
  keepalive_req();
  virtual ~keepalive_req();

  keepalive_req(const keepalive_req& from);

  inline keepalive_req& operator=(const keepalive_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  keepalive_req(keepalive_req&& from) noexcept
    : keepalive_req() {
    *this = ::std::move(from);
  }

  inline keepalive_req& operator=(keepalive_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const keepalive_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const keepalive_req* internal_default_instance() {
    return reinterpret_cast<const keepalive_req*>(
               &_keepalive_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(keepalive_req* other);
  friend void swap(keepalive_req& a, keepalive_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline keepalive_req* New() const PROTOBUF_FINAL { return New(NULL); }

  keepalive_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const keepalive_req& from);
  void MergeFrom(const keepalive_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(keepalive_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // .bdfs.node_meta node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::bdfs::node_meta& node() const;
  ::bdfs::node_meta* release_node();
  ::bdfs::node_meta* mutable_node();
  void set_allocated_node(::bdfs::node_meta* node);

  // int32 keepalive_id = 3;
  void clear_keepalive_id();
  static const int kKeepaliveIdFieldNumber = 3;
  ::google::protobuf::int32 keepalive_id() const;
  void set_keepalive_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bdfs.keepalive_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::message_meta* meta_;
  ::bdfs::node_meta* node_;
  ::google::protobuf::int32 keepalive_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultskeepalive_reqImpl();
};
// -------------------------------------------------------------------

class keepalive_resp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.keepalive_resp) */ {
 public:
  keepalive_resp();
  virtual ~keepalive_resp();

  keepalive_resp(const keepalive_resp& from);

  inline keepalive_resp& operator=(const keepalive_resp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  keepalive_resp(keepalive_resp&& from) noexcept
    : keepalive_resp() {
    *this = ::std::move(from);
  }

  inline keepalive_resp& operator=(keepalive_resp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const keepalive_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const keepalive_resp* internal_default_instance() {
    return reinterpret_cast<const keepalive_resp*>(
               &_keepalive_resp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(keepalive_resp* other);
  friend void swap(keepalive_resp& a, keepalive_resp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline keepalive_resp* New() const PROTOBUF_FINAL { return New(NULL); }

  keepalive_resp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const keepalive_resp& from);
  void MergeFrom(const keepalive_resp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(keepalive_resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nodename = 3;
  void clear_nodename();
  static const int kNodenameFieldNumber = 3;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // .bdfs.response resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::bdfs::response& resp() const;
  ::bdfs::response* release_resp();
  ::bdfs::response* mutable_resp();
  void set_allocated_resp(::bdfs::response* resp);

  // @@protoc_insertion_point(class_scope:bdfs.keepalive_resp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::bdfs::message_meta* meta_;
  ::bdfs::response* resp_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultskeepalive_respImpl();
};
// -------------------------------------------------------------------

class disconnect_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.disconnect_req) */ {
 public:
  disconnect_req();
  virtual ~disconnect_req();

  disconnect_req(const disconnect_req& from);

  inline disconnect_req& operator=(const disconnect_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  disconnect_req(disconnect_req&& from) noexcept
    : disconnect_req() {
    *this = ::std::move(from);
  }

  inline disconnect_req& operator=(disconnect_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const disconnect_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const disconnect_req* internal_default_instance() {
    return reinterpret_cast<const disconnect_req*>(
               &_disconnect_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(disconnect_req* other);
  friend void swap(disconnect_req& a, disconnect_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline disconnect_req* New() const PROTOBUF_FINAL { return New(NULL); }

  disconnect_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const disconnect_req& from);
  void MergeFrom(const disconnect_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(disconnect_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipaddress = 2;
  void clear_ipaddress();
  static const int kIpaddressFieldNumber = 2;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // string nodename = 3;
  void clear_nodename();
  static const int kNodenameFieldNumber = 3;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // @@protoc_insertion_point(class_scope:bdfs.disconnect_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::bdfs::message_meta* meta_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsdisconnect_reqImpl();
};
// -------------------------------------------------------------------

class disconnect_resp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.disconnect_resp) */ {
 public:
  disconnect_resp();
  virtual ~disconnect_resp();

  disconnect_resp(const disconnect_resp& from);

  inline disconnect_resp& operator=(const disconnect_resp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  disconnect_resp(disconnect_resp&& from) noexcept
    : disconnect_resp() {
    *this = ::std::move(from);
  }

  inline disconnect_resp& operator=(disconnect_resp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const disconnect_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const disconnect_resp* internal_default_instance() {
    return reinterpret_cast<const disconnect_resp*>(
               &_disconnect_resp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(disconnect_resp* other);
  friend void swap(disconnect_resp& a, disconnect_resp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline disconnect_resp* New() const PROTOBUF_FINAL { return New(NULL); }

  disconnect_resp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const disconnect_resp& from);
  void MergeFrom(const disconnect_resp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(disconnect_resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ipaddress = 3;
  void clear_ipaddress();
  static const int kIpaddressFieldNumber = 3;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // string nodename = 4;
  void clear_nodename();
  static const int kNodenameFieldNumber = 4;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // .bdfs.response resp = 2;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 2;
  const ::bdfs::response& resp() const;
  ::bdfs::response* release_resp();
  ::bdfs::response* mutable_resp();
  void set_allocated_resp(::bdfs::response* resp);

  // @@protoc_insertion_point(class_scope:bdfs.disconnect_resp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  ::bdfs::message_meta* meta_;
  ::bdfs::response* resp_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsdisconnect_respImpl();
};
// -------------------------------------------------------------------

class block_received_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bdfs.block_received_req) */ {
 public:
  block_received_req();
  virtual ~block_received_req();

  block_received_req(const block_received_req& from);

  inline block_received_req& operator=(const block_received_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  block_received_req(block_received_req&& from) noexcept
    : block_received_req() {
    *this = ::std::move(from);
  }

  inline block_received_req& operator=(block_received_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const block_received_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const block_received_req* internal_default_instance() {
    return reinterpret_cast<const block_received_req*>(
               &_block_received_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(block_received_req* other);
  friend void swap(block_received_req& a, block_received_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline block_received_req* New() const PROTOBUF_FINAL { return New(NULL); }

  block_received_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const block_received_req& from);
  void MergeFrom(const block_received_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(block_received_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bdfs.message_meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::bdfs::message_meta& meta() const;
  ::bdfs::message_meta* release_meta();
  ::bdfs::message_meta* mutable_meta();
  void set_allocated_meta(::bdfs::message_meta* meta);

  // .bdfs.datablock_meta recieved_block = 2;
  bool has_recieved_block() const;
  void clear_recieved_block();
  static const int kRecievedBlockFieldNumber = 2;
  const ::bdfs::datablock_meta& recieved_block() const;
  ::bdfs::datablock_meta* release_recieved_block();
  ::bdfs::datablock_meta* mutable_recieved_block();
  void set_allocated_recieved_block(::bdfs::datablock_meta* recieved_block);

  // @@protoc_insertion_point(class_scope:bdfs.block_received_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bdfs::message_meta* meta_;
  ::bdfs::datablock_meta* recieved_block_;
  mutable int _cached_size_;
  friend struct ::protobuf_datanode_2eproto::TableStruct;
  friend void ::protobuf_datanode_2eproto::InitDefaultsblock_received_reqImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// node_meta

// string _name = 1;
inline void node_meta::clear__name() {
  _name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_meta::_name() const {
  // @@protoc_insertion_point(field_get:bdfs.node_meta._name)
  return _name_.GetNoArena();
}
inline void node_meta::set__name(const ::std::string& value) {
  
  _name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.node_meta._name)
}
#if LANG_CXX11
inline void node_meta::set__name(::std::string&& value) {
  
  _name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.node_meta._name)
}
#endif
inline void node_meta::set__name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  _name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.node_meta._name)
}
inline void node_meta::set__name(const char* value, size_t size) {
  
  _name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.node_meta._name)
}
inline ::std::string* node_meta::mutable__name() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.node_meta._name)
  return _name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_meta::release__name() {
  // @@protoc_insertion_point(field_release:bdfs.node_meta._name)
  
  return _name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_meta::set_allocated__name(::std::string* _name) {
  if (_name != NULL) {
    
  } else {
    
  }
  _name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _name);
  // @@protoc_insertion_point(field_set_allocated:bdfs.node_meta._name)
}

// string _ip = 2;
inline void node_meta::clear__ip() {
  _ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_meta::_ip() const {
  // @@protoc_insertion_point(field_get:bdfs.node_meta._ip)
  return _ip_.GetNoArena();
}
inline void node_meta::set__ip(const ::std::string& value) {
  
  _ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.node_meta._ip)
}
#if LANG_CXX11
inline void node_meta::set__ip(::std::string&& value) {
  
  _ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.node_meta._ip)
}
#endif
inline void node_meta::set__ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  _ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.node_meta._ip)
}
inline void node_meta::set__ip(const char* value, size_t size) {
  
  _ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.node_meta._ip)
}
inline ::std::string* node_meta::mutable__ip() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.node_meta._ip)
  return _ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_meta::release__ip() {
  // @@protoc_insertion_point(field_release:bdfs.node_meta._ip)
  
  return _ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_meta::set_allocated__ip(::std::string* _ip) {
  if (_ip != NULL) {
    
  } else {
    
  }
  _ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _ip);
  // @@protoc_insertion_point(field_set_allocated:bdfs.node_meta._ip)
}

// -------------------------------------------------------------------

// msg_meta

// int64 id = 1;
inline void msg_meta::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 msg_meta::id() const {
  // @@protoc_insertion_point(field_get:bdfs.msg_meta.id)
  return id_;
}
inline void msg_meta::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:bdfs.msg_meta.id)
}

// int32 type = 2;
inline void msg_meta::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 msg_meta::type() const {
  // @@protoc_insertion_point(field_get:bdfs.msg_meta.type)
  return type_;
}
inline void msg_meta::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:bdfs.msg_meta.type)
}

// .bdfs.node_meta from = 3;
inline bool msg_meta::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void msg_meta::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
}
inline const ::bdfs::node_meta& msg_meta::from() const {
  const ::bdfs::node_meta* p = from_;
  // @@protoc_insertion_point(field_get:bdfs.msg_meta.from)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::node_meta*>(
      &::bdfs::_node_meta_default_instance_);
}
inline ::bdfs::node_meta* msg_meta::release_from() {
  // @@protoc_insertion_point(field_release:bdfs.msg_meta.from)
  
  ::bdfs::node_meta* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::bdfs::node_meta* msg_meta::mutable_from() {
  
  if (from_ == NULL) {
    from_ = new ::bdfs::node_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.msg_meta.from)
  return from_;
}
inline void msg_meta::set_allocated_from(::bdfs::node_meta* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_;
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:bdfs.msg_meta.from)
}

// -------------------------------------------------------------------

// datanode

// .bdfs.node_meta _meta = 1;
inline bool datanode::has__meta() const {
  return this != internal_default_instance() && _meta_ != NULL;
}
inline void datanode::clear__meta() {
  if (GetArenaNoVirtual() == NULL && _meta_ != NULL) {
    delete _meta_;
  }
  _meta_ = NULL;
}
inline const ::bdfs::node_meta& datanode::_meta() const {
  const ::bdfs::node_meta* p = _meta_;
  // @@protoc_insertion_point(field_get:bdfs.datanode._meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::node_meta*>(
      &::bdfs::_node_meta_default_instance_);
}
inline ::bdfs::node_meta* datanode::release__meta() {
  // @@protoc_insertion_point(field_release:bdfs.datanode._meta)
  
  ::bdfs::node_meta* temp = _meta_;
  _meta_ = NULL;
  return temp;
}
inline ::bdfs::node_meta* datanode::mutable__meta() {
  
  if (_meta_ == NULL) {
    _meta_ = new ::bdfs::node_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.datanode._meta)
  return _meta_;
}
inline void datanode::set_allocated__meta(::bdfs::node_meta* _meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete _meta_;
  }
  if (_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      _meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, _meta, submessage_arena);
    }
    
  } else {
    
  }
  _meta_ = _meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.datanode._meta)
}

// int64 sizeGB = 3;
inline void datanode::clear_sizegb() {
  sizegb_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 datanode::sizegb() const {
  // @@protoc_insertion_point(field_get:bdfs.datanode.sizeGB)
  return sizegb_;
}
inline void datanode::set_sizegb(::google::protobuf::int64 value) {
  
  sizegb_ = value;
  // @@protoc_insertion_point(field_set:bdfs.datanode.sizeGB)
}

// -------------------------------------------------------------------

// datablock_meta

// string name = 1;
inline void datablock_meta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& datablock_meta::name() const {
  // @@protoc_insertion_point(field_get:bdfs.datablock_meta.name)
  return name_.GetNoArena();
}
inline void datablock_meta::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.datablock_meta.name)
}
#if LANG_CXX11
inline void datablock_meta::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.datablock_meta.name)
}
#endif
inline void datablock_meta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.datablock_meta.name)
}
inline void datablock_meta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.datablock_meta.name)
}
inline ::std::string* datablock_meta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.datablock_meta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* datablock_meta::release_name() {
  // @@protoc_insertion_point(field_release:bdfs.datablock_meta.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void datablock_meta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bdfs.datablock_meta.name)
}

// int64 hash = 2;
inline void datablock_meta::clear_hash() {
  hash_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 datablock_meta::hash() const {
  // @@protoc_insertion_point(field_get:bdfs.datablock_meta.hash)
  return hash_;
}
inline void datablock_meta::set_hash(::google::protobuf::int64 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:bdfs.datablock_meta.hash)
}

// int32 replication_count = 3;
inline void datablock_meta::clear_replication_count() {
  replication_count_ = 0;
}
inline ::google::protobuf::int32 datablock_meta::replication_count() const {
  // @@protoc_insertion_point(field_get:bdfs.datablock_meta.replication_count)
  return replication_count_;
}
inline void datablock_meta::set_replication_count(::google::protobuf::int32 value) {
  
  replication_count_ = value;
  // @@protoc_insertion_point(field_set:bdfs.datablock_meta.replication_count)
}

// repeated .bdfs.datanode replica_nodes = 4;
inline int datablock_meta::replica_nodes_size() const {
  return replica_nodes_.size();
}
inline void datablock_meta::clear_replica_nodes() {
  replica_nodes_.Clear();
}
inline const ::bdfs::datanode& datablock_meta::replica_nodes(int index) const {
  // @@protoc_insertion_point(field_get:bdfs.datablock_meta.replica_nodes)
  return replica_nodes_.Get(index);
}
inline ::bdfs::datanode* datablock_meta::mutable_replica_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:bdfs.datablock_meta.replica_nodes)
  return replica_nodes_.Mutable(index);
}
inline ::bdfs::datanode* datablock_meta::add_replica_nodes() {
  // @@protoc_insertion_point(field_add:bdfs.datablock_meta.replica_nodes)
  return replica_nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bdfs::datanode >*
datablock_meta::mutable_replica_nodes() {
  // @@protoc_insertion_point(field_mutable_list:bdfs.datablock_meta.replica_nodes)
  return &replica_nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bdfs::datanode >&
datablock_meta::replica_nodes() const {
  // @@protoc_insertion_point(field_list:bdfs.datablock_meta.replica_nodes)
  return replica_nodes_;
}

// -------------------------------------------------------------------

// block_summary

// .bdfs.node_meta data_meta = 1;
inline bool block_summary::has_data_meta() const {
  return this != internal_default_instance() && data_meta_ != NULL;
}
inline void block_summary::clear_data_meta() {
  if (GetArenaNoVirtual() == NULL && data_meta_ != NULL) {
    delete data_meta_;
  }
  data_meta_ = NULL;
}
inline const ::bdfs::node_meta& block_summary::data_meta() const {
  const ::bdfs::node_meta* p = data_meta_;
  // @@protoc_insertion_point(field_get:bdfs.block_summary.data_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::node_meta*>(
      &::bdfs::_node_meta_default_instance_);
}
inline ::bdfs::node_meta* block_summary::release_data_meta() {
  // @@protoc_insertion_point(field_release:bdfs.block_summary.data_meta)
  
  ::bdfs::node_meta* temp = data_meta_;
  data_meta_ = NULL;
  return temp;
}
inline ::bdfs::node_meta* block_summary::mutable_data_meta() {
  
  if (data_meta_ == NULL) {
    data_meta_ = new ::bdfs::node_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.block_summary.data_meta)
  return data_meta_;
}
inline void block_summary::set_allocated_data_meta(::bdfs::node_meta* data_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_meta_;
  }
  if (data_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_meta, submessage_arena);
    }
    
  } else {
    
  }
  data_meta_ = data_meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.block_summary.data_meta)
}

// repeated .bdfs.datablock_meta blocks = 2;
inline int block_summary::blocks_size() const {
  return blocks_.size();
}
inline void block_summary::clear_blocks() {
  blocks_.Clear();
}
inline const ::bdfs::datablock_meta& block_summary::blocks(int index) const {
  // @@protoc_insertion_point(field_get:bdfs.block_summary.blocks)
  return blocks_.Get(index);
}
inline ::bdfs::datablock_meta* block_summary::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:bdfs.block_summary.blocks)
  return blocks_.Mutable(index);
}
inline ::bdfs::datablock_meta* block_summary::add_blocks() {
  // @@protoc_insertion_point(field_add:bdfs.block_summary.blocks)
  return blocks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bdfs::datablock_meta >*
block_summary::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:bdfs.block_summary.blocks)
  return &blocks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bdfs::datablock_meta >&
block_summary::blocks() const {
  // @@protoc_insertion_point(field_list:bdfs.block_summary.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// fsserver_meta

// .bdfs.node_meta _meta = 1;
inline bool fsserver_meta::has__meta() const {
  return this != internal_default_instance() && _meta_ != NULL;
}
inline void fsserver_meta::clear__meta() {
  if (GetArenaNoVirtual() == NULL && _meta_ != NULL) {
    delete _meta_;
  }
  _meta_ = NULL;
}
inline const ::bdfs::node_meta& fsserver_meta::_meta() const {
  const ::bdfs::node_meta* p = _meta_;
  // @@protoc_insertion_point(field_get:bdfs.fsserver_meta._meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::node_meta*>(
      &::bdfs::_node_meta_default_instance_);
}
inline ::bdfs::node_meta* fsserver_meta::release__meta() {
  // @@protoc_insertion_point(field_release:bdfs.fsserver_meta._meta)
  
  ::bdfs::node_meta* temp = _meta_;
  _meta_ = NULL;
  return temp;
}
inline ::bdfs::node_meta* fsserver_meta::mutable__meta() {
  
  if (_meta_ == NULL) {
    _meta_ = new ::bdfs::node_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.fsserver_meta._meta)
  return _meta_;
}
inline void fsserver_meta::set_allocated__meta(::bdfs::node_meta* _meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete _meta_;
  }
  if (_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      _meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, _meta, submessage_arena);
    }
    
  } else {
    
  }
  _meta_ = _meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.fsserver_meta._meta)
}

// int32 keepalive_timeout = 2;
inline void fsserver_meta::clear_keepalive_timeout() {
  keepalive_timeout_ = 0;
}
inline ::google::protobuf::int32 fsserver_meta::keepalive_timeout() const {
  // @@protoc_insertion_point(field_get:bdfs.fsserver_meta.keepalive_timeout)
  return keepalive_timeout_;
}
inline void fsserver_meta::set_keepalive_timeout(::google::protobuf::int32 value) {
  
  keepalive_timeout_ = value;
  // @@protoc_insertion_point(field_set:bdfs.fsserver_meta.keepalive_timeout)
}

// -------------------------------------------------------------------

// connect_req

// .bdfs.message_meta meta = 1;
inline bool connect_req::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& connect_req::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.connect_req.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* connect_req::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.connect_req.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* connect_req::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.connect_req.meta)
  return meta_;
}
inline void connect_req::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.connect_req.meta)
}

// .bdfs.datanode _datanode = 2;
inline bool connect_req::has__datanode() const {
  return this != internal_default_instance() && _datanode_ != NULL;
}
inline void connect_req::clear__datanode() {
  if (GetArenaNoVirtual() == NULL && _datanode_ != NULL) {
    delete _datanode_;
  }
  _datanode_ = NULL;
}
inline const ::bdfs::datanode& connect_req::_datanode() const {
  const ::bdfs::datanode* p = _datanode_;
  // @@protoc_insertion_point(field_get:bdfs.connect_req._datanode)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::datanode*>(
      &::bdfs::_datanode_default_instance_);
}
inline ::bdfs::datanode* connect_req::release__datanode() {
  // @@protoc_insertion_point(field_release:bdfs.connect_req._datanode)
  
  ::bdfs::datanode* temp = _datanode_;
  _datanode_ = NULL;
  return temp;
}
inline ::bdfs::datanode* connect_req::mutable__datanode() {
  
  if (_datanode_ == NULL) {
    _datanode_ = new ::bdfs::datanode;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.connect_req._datanode)
  return _datanode_;
}
inline void connect_req::set_allocated__datanode(::bdfs::datanode* _datanode) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete _datanode_;
  }
  if (_datanode) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      _datanode = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, _datanode, submessage_arena);
    }
    
  } else {
    
  }
  _datanode_ = _datanode;
  // @@protoc_insertion_point(field_set_allocated:bdfs.connect_req._datanode)
}

// -------------------------------------------------------------------

// connect_resp

// .bdfs.message_meta meta = 1;
inline bool connect_resp::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& connect_resp::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.connect_resp.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* connect_resp::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.connect_resp.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* connect_resp::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.connect_resp.meta)
  return meta_;
}
inline void connect_resp::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.connect_resp.meta)
}

// .bdfs.response resp = 2;
inline bool connect_resp::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline const ::bdfs::response& connect_resp::resp() const {
  const ::bdfs::response* p = resp_;
  // @@protoc_insertion_point(field_get:bdfs.connect_resp.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::response*>(
      &::bdfs::_response_default_instance_);
}
inline ::bdfs::response* connect_resp::release_resp() {
  // @@protoc_insertion_point(field_release:bdfs.connect_resp.resp)
  
  ::bdfs::response* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::bdfs::response* connect_resp::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::bdfs::response;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.connect_resp.resp)
  return resp_;
}
inline void connect_resp::set_allocated_resp(::bdfs::response* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resp_);
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    
  } else {
    
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:bdfs.connect_resp.resp)
}

// .bdfs.fsserver_meta server_meta = 3;
inline bool connect_resp::has_server_meta() const {
  return this != internal_default_instance() && server_meta_ != NULL;
}
inline void connect_resp::clear_server_meta() {
  if (GetArenaNoVirtual() == NULL && server_meta_ != NULL) {
    delete server_meta_;
  }
  server_meta_ = NULL;
}
inline const ::bdfs::fsserver_meta& connect_resp::server_meta() const {
  const ::bdfs::fsserver_meta* p = server_meta_;
  // @@protoc_insertion_point(field_get:bdfs.connect_resp.server_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::fsserver_meta*>(
      &::bdfs::_fsserver_meta_default_instance_);
}
inline ::bdfs::fsserver_meta* connect_resp::release_server_meta() {
  // @@protoc_insertion_point(field_release:bdfs.connect_resp.server_meta)
  
  ::bdfs::fsserver_meta* temp = server_meta_;
  server_meta_ = NULL;
  return temp;
}
inline ::bdfs::fsserver_meta* connect_resp::mutable_server_meta() {
  
  if (server_meta_ == NULL) {
    server_meta_ = new ::bdfs::fsserver_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.connect_resp.server_meta)
  return server_meta_;
}
inline void connect_resp::set_allocated_server_meta(::bdfs::fsserver_meta* server_meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_meta_;
  }
  if (server_meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_meta, submessage_arena);
    }
    
  } else {
    
  }
  server_meta_ = server_meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.connect_resp.server_meta)
}

// -------------------------------------------------------------------

// keepalive_req

// .bdfs.message_meta meta = 1;
inline bool keepalive_req::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& keepalive_req::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.keepalive_req.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* keepalive_req::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.keepalive_req.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* keepalive_req::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.keepalive_req.meta)
  return meta_;
}
inline void keepalive_req::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.keepalive_req.meta)
}

// .bdfs.node_meta node = 2;
inline bool keepalive_req::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void keepalive_req::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
}
inline const ::bdfs::node_meta& keepalive_req::node() const {
  const ::bdfs::node_meta* p = node_;
  // @@protoc_insertion_point(field_get:bdfs.keepalive_req.node)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::node_meta*>(
      &::bdfs::_node_meta_default_instance_);
}
inline ::bdfs::node_meta* keepalive_req::release_node() {
  // @@protoc_insertion_point(field_release:bdfs.keepalive_req.node)
  
  ::bdfs::node_meta* temp = node_;
  node_ = NULL;
  return temp;
}
inline ::bdfs::node_meta* keepalive_req::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::bdfs::node_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.keepalive_req.node)
  return node_;
}
inline void keepalive_req::set_allocated_node(::bdfs::node_meta* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_;
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:bdfs.keepalive_req.node)
}

// int32 keepalive_id = 3;
inline void keepalive_req::clear_keepalive_id() {
  keepalive_id_ = 0;
}
inline ::google::protobuf::int32 keepalive_req::keepalive_id() const {
  // @@protoc_insertion_point(field_get:bdfs.keepalive_req.keepalive_id)
  return keepalive_id_;
}
inline void keepalive_req::set_keepalive_id(::google::protobuf::int32 value) {
  
  keepalive_id_ = value;
  // @@protoc_insertion_point(field_set:bdfs.keepalive_req.keepalive_id)
}

// -------------------------------------------------------------------

// keepalive_resp

// .bdfs.message_meta meta = 1;
inline bool keepalive_resp::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& keepalive_resp::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.keepalive_resp.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* keepalive_resp::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.keepalive_resp.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* keepalive_resp::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.keepalive_resp.meta)
  return meta_;
}
inline void keepalive_resp::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.keepalive_resp.meta)
}

// .bdfs.response resp = 2;
inline bool keepalive_resp::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline const ::bdfs::response& keepalive_resp::resp() const {
  const ::bdfs::response* p = resp_;
  // @@protoc_insertion_point(field_get:bdfs.keepalive_resp.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::response*>(
      &::bdfs::_response_default_instance_);
}
inline ::bdfs::response* keepalive_resp::release_resp() {
  // @@protoc_insertion_point(field_release:bdfs.keepalive_resp.resp)
  
  ::bdfs::response* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::bdfs::response* keepalive_resp::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::bdfs::response;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.keepalive_resp.resp)
  return resp_;
}
inline void keepalive_resp::set_allocated_resp(::bdfs::response* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resp_);
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    
  } else {
    
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:bdfs.keepalive_resp.resp)
}

// string nodename = 3;
inline void keepalive_resp::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& keepalive_resp::nodename() const {
  // @@protoc_insertion_point(field_get:bdfs.keepalive_resp.nodename)
  return nodename_.GetNoArena();
}
inline void keepalive_resp::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.keepalive_resp.nodename)
}
#if LANG_CXX11
inline void keepalive_resp::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.keepalive_resp.nodename)
}
#endif
inline void keepalive_resp::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.keepalive_resp.nodename)
}
inline void keepalive_resp::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.keepalive_resp.nodename)
}
inline ::std::string* keepalive_resp::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.keepalive_resp.nodename)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* keepalive_resp::release_nodename() {
  // @@protoc_insertion_point(field_release:bdfs.keepalive_resp.nodename)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void keepalive_resp::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:bdfs.keepalive_resp.nodename)
}

// -------------------------------------------------------------------

// disconnect_req

// .bdfs.message_meta meta = 1;
inline bool disconnect_req::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& disconnect_req::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.disconnect_req.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* disconnect_req::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_req.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* disconnect_req::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_req.meta)
  return meta_;
}
inline void disconnect_req::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_req.meta)
}

// string ipaddress = 2;
inline void disconnect_req::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& disconnect_req::ipaddress() const {
  // @@protoc_insertion_point(field_get:bdfs.disconnect_req.ipaddress)
  return ipaddress_.GetNoArena();
}
inline void disconnect_req::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.disconnect_req.ipaddress)
}
#if LANG_CXX11
inline void disconnect_req::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.disconnect_req.ipaddress)
}
#endif
inline void disconnect_req::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.disconnect_req.ipaddress)
}
inline void disconnect_req::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.disconnect_req.ipaddress)
}
inline ::std::string* disconnect_req::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_req.ipaddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* disconnect_req::release_ipaddress() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_req.ipaddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void disconnect_req::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_req.ipaddress)
}

// string nodename = 3;
inline void disconnect_req::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& disconnect_req::nodename() const {
  // @@protoc_insertion_point(field_get:bdfs.disconnect_req.nodename)
  return nodename_.GetNoArena();
}
inline void disconnect_req::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.disconnect_req.nodename)
}
#if LANG_CXX11
inline void disconnect_req::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.disconnect_req.nodename)
}
#endif
inline void disconnect_req::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.disconnect_req.nodename)
}
inline void disconnect_req::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.disconnect_req.nodename)
}
inline ::std::string* disconnect_req::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_req.nodename)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* disconnect_req::release_nodename() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_req.nodename)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void disconnect_req::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_req.nodename)
}

// -------------------------------------------------------------------

// disconnect_resp

// .bdfs.message_meta meta = 1;
inline bool disconnect_resp::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& disconnect_resp::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.disconnect_resp.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* disconnect_resp::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_resp.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* disconnect_resp::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_resp.meta)
  return meta_;
}
inline void disconnect_resp::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_resp.meta)
}

// .bdfs.response resp = 2;
inline bool disconnect_resp::has_resp() const {
  return this != internal_default_instance() && resp_ != NULL;
}
inline const ::bdfs::response& disconnect_resp::resp() const {
  const ::bdfs::response* p = resp_;
  // @@protoc_insertion_point(field_get:bdfs.disconnect_resp.resp)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::response*>(
      &::bdfs::_response_default_instance_);
}
inline ::bdfs::response* disconnect_resp::release_resp() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_resp.resp)
  
  ::bdfs::response* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline ::bdfs::response* disconnect_resp::mutable_resp() {
  
  if (resp_ == NULL) {
    resp_ = new ::bdfs::response;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_resp.resp)
  return resp_;
}
inline void disconnect_resp::set_allocated_resp(::bdfs::response* resp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(resp_);
  }
  if (resp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resp, submessage_arena);
    }
    
  } else {
    
  }
  resp_ = resp;
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_resp.resp)
}

// string ipaddress = 3;
inline void disconnect_resp::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& disconnect_resp::ipaddress() const {
  // @@protoc_insertion_point(field_get:bdfs.disconnect_resp.ipaddress)
  return ipaddress_.GetNoArena();
}
inline void disconnect_resp::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.disconnect_resp.ipaddress)
}
#if LANG_CXX11
inline void disconnect_resp::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.disconnect_resp.ipaddress)
}
#endif
inline void disconnect_resp::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.disconnect_resp.ipaddress)
}
inline void disconnect_resp::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.disconnect_resp.ipaddress)
}
inline ::std::string* disconnect_resp::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_resp.ipaddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* disconnect_resp::release_ipaddress() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_resp.ipaddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void disconnect_resp::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_resp.ipaddress)
}

// string nodename = 4;
inline void disconnect_resp::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& disconnect_resp::nodename() const {
  // @@protoc_insertion_point(field_get:bdfs.disconnect_resp.nodename)
  return nodename_.GetNoArena();
}
inline void disconnect_resp::set_nodename(const ::std::string& value) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bdfs.disconnect_resp.nodename)
}
#if LANG_CXX11
inline void disconnect_resp::set_nodename(::std::string&& value) {
  
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bdfs.disconnect_resp.nodename)
}
#endif
inline void disconnect_resp::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bdfs.disconnect_resp.nodename)
}
inline void disconnect_resp::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bdfs.disconnect_resp.nodename)
}
inline ::std::string* disconnect_resp::mutable_nodename() {
  
  // @@protoc_insertion_point(field_mutable:bdfs.disconnect_resp.nodename)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* disconnect_resp::release_nodename() {
  // @@protoc_insertion_point(field_release:bdfs.disconnect_resp.nodename)
  
  return nodename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void disconnect_resp::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:bdfs.disconnect_resp.nodename)
}

// -------------------------------------------------------------------

// block_received_req

// .bdfs.message_meta meta = 1;
inline bool block_received_req::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::bdfs::message_meta& block_received_req::meta() const {
  const ::bdfs::message_meta* p = meta_;
  // @@protoc_insertion_point(field_get:bdfs.block_received_req.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::message_meta*>(
      &::bdfs::_message_meta_default_instance_);
}
inline ::bdfs::message_meta* block_received_req::release_meta() {
  // @@protoc_insertion_point(field_release:bdfs.block_received_req.meta)
  
  ::bdfs::message_meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::bdfs::message_meta* block_received_req::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::bdfs::message_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.block_received_req.meta)
  return meta_;
}
inline void block_received_req::set_allocated_meta(::bdfs::message_meta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:bdfs.block_received_req.meta)
}

// .bdfs.datablock_meta recieved_block = 2;
inline bool block_received_req::has_recieved_block() const {
  return this != internal_default_instance() && recieved_block_ != NULL;
}
inline void block_received_req::clear_recieved_block() {
  if (GetArenaNoVirtual() == NULL && recieved_block_ != NULL) {
    delete recieved_block_;
  }
  recieved_block_ = NULL;
}
inline const ::bdfs::datablock_meta& block_received_req::recieved_block() const {
  const ::bdfs::datablock_meta* p = recieved_block_;
  // @@protoc_insertion_point(field_get:bdfs.block_received_req.recieved_block)
  return p != NULL ? *p : *reinterpret_cast<const ::bdfs::datablock_meta*>(
      &::bdfs::_datablock_meta_default_instance_);
}
inline ::bdfs::datablock_meta* block_received_req::release_recieved_block() {
  // @@protoc_insertion_point(field_release:bdfs.block_received_req.recieved_block)
  
  ::bdfs::datablock_meta* temp = recieved_block_;
  recieved_block_ = NULL;
  return temp;
}
inline ::bdfs::datablock_meta* block_received_req::mutable_recieved_block() {
  
  if (recieved_block_ == NULL) {
    recieved_block_ = new ::bdfs::datablock_meta;
  }
  // @@protoc_insertion_point(field_mutable:bdfs.block_received_req.recieved_block)
  return recieved_block_;
}
inline void block_received_req::set_allocated_recieved_block(::bdfs::datablock_meta* recieved_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recieved_block_;
  }
  if (recieved_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recieved_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recieved_block, submessage_arena);
    }
    
  } else {
    
  }
  recieved_block_ = recieved_block;
  // @@protoc_insertion_point(field_set_allocated:bdfs.block_received_req.recieved_block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bdfs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datanode_2eproto__INCLUDED
