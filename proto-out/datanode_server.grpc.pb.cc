// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datanode_server.proto

#include "datanode_server.pb.h"
#include "datanode_server.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bdfs {

static const char* datanode_server_method_names[] = {
  "/bdfs.datanode_server/get_replicas",
  "/bdfs.datanode_server/get_block",
  "/bdfs.datanode_server/send_block",
};

std::unique_ptr< datanode_server::Stub> datanode_server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< datanode_server::Stub> stub(new datanode_server::Stub(channel));
  return stub;
}

datanode_server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_replicas_(datanode_server_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_block_(datanode_server_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_block_(datanode_server_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status datanode_server::Stub::get_replicas(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::bdfs::replicas_resp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_replicas_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>* datanode_server::Stub::Asyncget_replicasRaw(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::replicas_resp>::Create(channel_.get(), cq, rpcmethod_get_replicas_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::replicas_resp>* datanode_server::Stub::PrepareAsyncget_replicasRaw(::grpc::ClientContext* context, const ::bdfs::replicas_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::replicas_resp>::Create(channel_.get(), cq, rpcmethod_get_replicas_, context, request, false);
}

::grpc::Status datanode_server::Stub::get_block(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::bdfs::get_block_resp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_block_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>* datanode_server::Stub::Asyncget_blockRaw(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::get_block_resp>::Create(channel_.get(), cq, rpcmethod_get_block_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::get_block_resp>* datanode_server::Stub::PrepareAsyncget_blockRaw(::grpc::ClientContext* context, const ::bdfs::get_block_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::get_block_resp>::Create(channel_.get(), cq, rpcmethod_get_block_, context, request, false);
}

::grpc::Status datanode_server::Stub::send_block(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::bdfs::send_block_resp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_send_block_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>* datanode_server::Stub::Asyncsend_blockRaw(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::send_block_resp>::Create(channel_.get(), cq, rpcmethod_send_block_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::send_block_resp>* datanode_server::Stub::PrepareAsyncsend_blockRaw(::grpc::ClientContext* context, const ::bdfs::send_block_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::send_block_resp>::Create(channel_.get(), cq, rpcmethod_send_block_, context, request, false);
}

datanode_server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_server::Service, ::bdfs::replicas_req, ::bdfs::replicas_resp>(
          std::mem_fn(&datanode_server::Service::get_replicas), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_server::Service, ::bdfs::get_block_req, ::bdfs::get_block_resp>(
          std::mem_fn(&datanode_server::Service::get_block), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_server::Service, ::bdfs::send_block_req, ::bdfs::send_block_resp>(
          std::mem_fn(&datanode_server::Service::send_block), this)));
}

datanode_server::Service::~Service() {
}

::grpc::Status datanode_server::Service::get_replicas(::grpc::ServerContext* context, const ::bdfs::replicas_req* request, ::bdfs::replicas_resp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status datanode_server::Service::get_block(::grpc::ServerContext* context, const ::bdfs::get_block_req* request, ::bdfs::get_block_resp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status datanode_server::Service::send_block(::grpc::ServerContext* context, const ::bdfs::send_block_req* request, ::bdfs::send_block_resp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bdfs

