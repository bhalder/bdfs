// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datanode.proto

#include "datanode.pb.h"
#include "datanode.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bdfs {

static const char* datanode_protocol_method_names[] = {
  "/bdfs.datanode_protocol/SendConnect",
  "/bdfs.datanode_protocol/SendKeepalive",
  "/bdfs.datanode_protocol/SendBlockSummary",
  "/bdfs.datanode_protocol/SendDisconnect",
};

std::unique_ptr< datanode_protocol::Stub> datanode_protocol::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< datanode_protocol::Stub> stub(new datanode_protocol::Stub(channel));
  return stub;
}

datanode_protocol::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendConnect_(datanode_protocol_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendKeepalive_(datanode_protocol_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBlockSummary_(datanode_protocol_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDisconnect_(datanode_protocol_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status datanode_protocol::Stub::SendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::bdfs::connect_resp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendConnect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>* datanode_protocol::Stub::AsyncSendConnectRaw(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::connect_resp>::Create(channel_.get(), cq, rpcmethod_SendConnect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>* datanode_protocol::Stub::PrepareAsyncSendConnectRaw(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::connect_resp>::Create(channel_.get(), cq, rpcmethod_SendConnect_, context, request, false);
}

::grpc::Status datanode_protocol::Stub::SendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::bdfs::keepalive_resp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendKeepalive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>* datanode_protocol::Stub::AsyncSendKeepaliveRaw(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::keepalive_resp>::Create(channel_.get(), cq, rpcmethod_SendKeepalive_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>* datanode_protocol::Stub::PrepareAsyncSendKeepaliveRaw(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::keepalive_resp>::Create(channel_.get(), cq, rpcmethod_SendKeepalive_, context, request, false);
}

::grpc::Status datanode_protocol::Stub::SendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::bdfs::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendBlockSummary_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::Empty>* datanode_protocol::Stub::AsyncSendBlockSummaryRaw(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::Empty>::Create(channel_.get(), cq, rpcmethod_SendBlockSummary_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::Empty>* datanode_protocol::Stub::PrepareAsyncSendBlockSummaryRaw(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::Empty>::Create(channel_.get(), cq, rpcmethod_SendBlockSummary_, context, request, false);
}

::grpc::Status datanode_protocol::Stub::SendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::bdfs::disconnect_resp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendDisconnect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>* datanode_protocol::Stub::AsyncSendDisconnectRaw(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::disconnect_resp>::Create(channel_.get(), cq, rpcmethod_SendDisconnect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>* datanode_protocol::Stub::PrepareAsyncSendDisconnectRaw(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bdfs::disconnect_resp>::Create(channel_.get(), cq, rpcmethod_SendDisconnect_, context, request, false);
}

datanode_protocol::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_protocol_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_protocol::Service, ::bdfs::connect_req, ::bdfs::connect_resp>(
          std::mem_fn(&datanode_protocol::Service::SendConnect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_protocol_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_protocol::Service, ::bdfs::keepalive_req, ::bdfs::keepalive_resp>(
          std::mem_fn(&datanode_protocol::Service::SendKeepalive), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_protocol_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_protocol::Service, ::bdfs::block_summary, ::bdfs::Empty>(
          std::mem_fn(&datanode_protocol::Service::SendBlockSummary), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      datanode_protocol_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< datanode_protocol::Service, ::bdfs::disconnect_req, ::bdfs::disconnect_resp>(
          std::mem_fn(&datanode_protocol::Service::SendDisconnect), this)));
}

datanode_protocol::Service::~Service() {
}

::grpc::Status datanode_protocol::Service::SendConnect(::grpc::ServerContext* context, const ::bdfs::connect_req* request, ::bdfs::connect_resp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status datanode_protocol::Service::SendKeepalive(::grpc::ServerContext* context, const ::bdfs::keepalive_req* request, ::bdfs::keepalive_resp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status datanode_protocol::Service::SendBlockSummary(::grpc::ServerContext* context, const ::bdfs::block_summary* request, ::bdfs::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status datanode_protocol::Service::SendDisconnect(::grpc::ServerContext* context, const ::bdfs::disconnect_req* request, ::bdfs::disconnect_resp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bdfs

