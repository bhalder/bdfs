// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datanode.proto
#ifndef GRPC_datanode_2eproto__INCLUDED
#define GRPC_datanode_2eproto__INCLUDED

#include "datanode.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bdfs {

class datanode_protocol final {
 public:
  static constexpr char const* service_full_name() {
    return "bdfs.datanode_protocol";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::bdfs::connect_resp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::connect_resp>> AsyncSendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::connect_resp>>(AsyncSendConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::connect_resp>> PrepareAsyncSendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::connect_resp>>(PrepareAsyncSendConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status SendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::bdfs::keepalive_resp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::keepalive_resp>> AsyncSendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::keepalive_resp>>(AsyncSendKeepaliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::keepalive_resp>> PrepareAsyncSendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::keepalive_resp>>(PrepareAsyncSendKeepaliveRaw(context, request, cq));
    }
    virtual ::grpc::Status SendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::bdfs::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::Empty>> AsyncSendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::Empty>>(AsyncSendBlockSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::Empty>> PrepareAsyncSendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::Empty>>(PrepareAsyncSendBlockSummaryRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::bdfs::disconnect_resp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::disconnect_resp>> AsyncSendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::disconnect_resp>>(AsyncSendDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::disconnect_resp>> PrepareAsyncSendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::disconnect_resp>>(PrepareAsyncSendDisconnectRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::connect_resp>* AsyncSendConnectRaw(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::connect_resp>* PrepareAsyncSendConnectRaw(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::keepalive_resp>* AsyncSendKeepaliveRaw(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::keepalive_resp>* PrepareAsyncSendKeepaliveRaw(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::Empty>* AsyncSendBlockSummaryRaw(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::Empty>* PrepareAsyncSendBlockSummaryRaw(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::disconnect_resp>* AsyncSendDisconnectRaw(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bdfs::disconnect_resp>* PrepareAsyncSendDisconnectRaw(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::bdfs::connect_resp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>> AsyncSendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>>(AsyncSendConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>> PrepareAsyncSendConnect(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>>(PrepareAsyncSendConnectRaw(context, request, cq));
    }
    ::grpc::Status SendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::bdfs::keepalive_resp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>> AsyncSendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>>(AsyncSendKeepaliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>> PrepareAsyncSendKeepalive(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>>(PrepareAsyncSendKeepaliveRaw(context, request, cq));
    }
    ::grpc::Status SendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::bdfs::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::Empty>> AsyncSendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::Empty>>(AsyncSendBlockSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::Empty>> PrepareAsyncSendBlockSummary(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::Empty>>(PrepareAsyncSendBlockSummaryRaw(context, request, cq));
    }
    ::grpc::Status SendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::bdfs::disconnect_resp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>> AsyncSendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>>(AsyncSendDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>> PrepareAsyncSendDisconnect(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>>(PrepareAsyncSendDisconnectRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>* AsyncSendConnectRaw(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::connect_resp>* PrepareAsyncSendConnectRaw(::grpc::ClientContext* context, const ::bdfs::connect_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>* AsyncSendKeepaliveRaw(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::keepalive_resp>* PrepareAsyncSendKeepaliveRaw(::grpc::ClientContext* context, const ::bdfs::keepalive_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::Empty>* AsyncSendBlockSummaryRaw(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::Empty>* PrepareAsyncSendBlockSummaryRaw(::grpc::ClientContext* context, const ::bdfs::block_summary& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>* AsyncSendDisconnectRaw(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bdfs::disconnect_resp>* PrepareAsyncSendDisconnectRaw(::grpc::ClientContext* context, const ::bdfs::disconnect_req& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_SendKeepalive_;
    const ::grpc::internal::RpcMethod rpcmethod_SendBlockSummary_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDisconnect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendConnect(::grpc::ServerContext* context, const ::bdfs::connect_req* request, ::bdfs::connect_resp* response);
    virtual ::grpc::Status SendKeepalive(::grpc::ServerContext* context, const ::bdfs::keepalive_req* request, ::bdfs::keepalive_resp* response);
    virtual ::grpc::Status SendBlockSummary(::grpc::ServerContext* context, const ::bdfs::block_summary* request, ::bdfs::Empty* response);
    virtual ::grpc::Status SendDisconnect(::grpc::ServerContext* context, const ::bdfs::disconnect_req* request, ::bdfs::disconnect_resp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendConnect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendConnect(::grpc::ServerContext* context, const ::bdfs::connect_req* request, ::bdfs::connect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendConnect(::grpc::ServerContext* context, ::bdfs::connect_req* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::connect_resp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendKeepalive() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKeepalive(::grpc::ServerContext* context, const ::bdfs::keepalive_req* request, ::bdfs::keepalive_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendKeepalive(::grpc::ServerContext* context, ::bdfs::keepalive_req* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::keepalive_resp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendBlockSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendBlockSummary() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendBlockSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlockSummary(::grpc::ServerContext* context, const ::bdfs::block_summary* request, ::bdfs::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendBlockSummary(::grpc::ServerContext* context, ::bdfs::block_summary* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendDisconnect() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDisconnect(::grpc::ServerContext* context, const ::bdfs::disconnect_req* request, ::bdfs::disconnect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDisconnect(::grpc::ServerContext* context, ::bdfs::disconnect_req* request, ::grpc::ServerAsyncResponseWriter< ::bdfs::disconnect_resp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendConnect<WithAsyncMethod_SendKeepalive<WithAsyncMethod_SendBlockSummary<WithAsyncMethod_SendDisconnect<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendConnect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendConnect(::grpc::ServerContext* context, const ::bdfs::connect_req* request, ::bdfs::connect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendKeepalive() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKeepalive(::grpc::ServerContext* context, const ::bdfs::keepalive_req* request, ::bdfs::keepalive_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendBlockSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendBlockSummary() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendBlockSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlockSummary(::grpc::ServerContext* context, const ::bdfs::block_summary* request, ::bdfs::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendDisconnect() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDisconnect(::grpc::ServerContext* context, const ::bdfs::disconnect_req* request, ::bdfs::disconnect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendConnect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendConnect(::grpc::ServerContext* context, const ::bdfs::connect_req* request, ::bdfs::connect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendKeepalive() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendKeepalive(::grpc::ServerContext* context, const ::bdfs::keepalive_req* request, ::bdfs::keepalive_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendKeepalive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendBlockSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendBlockSummary() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendBlockSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendBlockSummary(::grpc::ServerContext* context, const ::bdfs::block_summary* request, ::bdfs::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendBlockSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendDisconnect() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDisconnect(::grpc::ServerContext* context, const ::bdfs::disconnect_req* request, ::bdfs::disconnect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDisconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendConnect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::connect_req, ::bdfs::connect_resp>(std::bind(&WithStreamedUnaryMethod_SendConnect<BaseClass>::StreamedSendConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendConnect(::grpc::ServerContext* context, const ::bdfs::connect_req* request, ::bdfs::connect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::connect_req,::bdfs::connect_resp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendKeepalive() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::keepalive_req, ::bdfs::keepalive_resp>(std::bind(&WithStreamedUnaryMethod_SendKeepalive<BaseClass>::StreamedSendKeepalive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendKeepalive(::grpc::ServerContext* context, const ::bdfs::keepalive_req* request, ::bdfs::keepalive_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendKeepalive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::keepalive_req,::bdfs::keepalive_resp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendBlockSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendBlockSummary() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::block_summary, ::bdfs::Empty>(std::bind(&WithStreamedUnaryMethod_SendBlockSummary<BaseClass>::StreamedSendBlockSummary, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendBlockSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendBlockSummary(::grpc::ServerContext* context, const ::bdfs::block_summary* request, ::bdfs::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendBlockSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::block_summary,::bdfs::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDisconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendDisconnect() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::bdfs::disconnect_req, ::bdfs::disconnect_resp>(std::bind(&WithStreamedUnaryMethod_SendDisconnect<BaseClass>::StreamedSendDisconnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendDisconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDisconnect(::grpc::ServerContext* context, const ::bdfs::disconnect_req* request, ::bdfs::disconnect_resp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDisconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bdfs::disconnect_req,::bdfs::disconnect_resp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendConnect<WithStreamedUnaryMethod_SendKeepalive<WithStreamedUnaryMethod_SendBlockSummary<WithStreamedUnaryMethod_SendDisconnect<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendConnect<WithStreamedUnaryMethod_SendKeepalive<WithStreamedUnaryMethod_SendBlockSummary<WithStreamedUnaryMethod_SendDisconnect<Service > > > > StreamedService;
};

}  // namespace bdfs


#endif  // GRPC_datanode_2eproto__INCLUDED
